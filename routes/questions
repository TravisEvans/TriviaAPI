const express = require("express");
const router = express.Router();
const { Sequelize, DataTypes, Model } = require("sequelize");

// Setup Sequelize
const sequelize = new Sequelize("sqlite:trivia.db");

// Define model
class Question extends Model { }
Question.init({
    category: { type: DataTypes.STRING, allowNull: false },
    question: { type: DataTypes.STRING, allowNull: false },
    answer: { type: DataTypes.STRING, allowNull: false },
    choices: {
        type: DataTypes.TEXT,
        allowNull: false,
        get() { return JSON.parse(this.getDataValue("choices")); },
        set(value) { this.setDataValue("choices", JSON.stringify(value)); }
    }
}, {
    sequelize,
    modelName: "question",
    tableName: "trivia",
    timestamps: false
});

(async () => await sequelize.sync())();

// Create a question
router.post("/", async (req, res) => {
    try {
        const q = await Question.create(req.body);
        res.status(201).json(q);
    } catch (e) {
        res.status(400).json({ error: e.message });
    }
});

// Get all questions
router.get("/", async (req, res) => {
    try {
        const q = await Question.findAll();
        res.json(q);
    } catch (e) {
        res.status(500).json({ error: e.message });
    }
});

// Random question
router.get("/random", async (req, res) => {
    try {
        const ids = await Question.findAll({ attributes: ["id"] });
        const rand = ids[Math.floor(Math.random() * ids.length)].id;
        const q = await Question.findByPk(rand);
        res.json(q);
    } catch (e) {
        res.status(500).json({ error: e.message });
    }
});

module.exports = router;
